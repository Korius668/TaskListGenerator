name: Weekly Task Rotation

on:
  schedule:
    - cron: '0 9 * * 0' # every Sunday at 09:00 UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  assign-tasks:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git identity
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install pandas numpy email-validator

      - name: Fetch or create history branch
        run: |
          git fetch origin task-history || echo "No existing history branch"
          if git show-ref --verify --quiet refs/remotes/origin/task-history; then
            echo "âœ… History branch exists"
            git checkout task-history
          else
            echo "ðŸš€ Creating new history branch"
            git checkout --orphan task-history
            mkdir -p .github/data
            echo "{}" > .github/data/history.json
            git add .github/data/history.json
            git commit -m "Initialize task history"
            git push origin task-history
          fi
          git checkout main

      - name: Run task assignment
        env:
          TASKS_JSON: ${{ vars.TASKS_JSON }}
          PEOPLE_JSON: ${{ vars.PEOPLE_JSON }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          SMTP_SERVER: ${{ vars.SMTP_SERVER }}
          SMTP_PORT: ${{ vars.SMTP_PORT }}
        run: python .github/scripts/assign_tasks.py
      - name: Commit updated history
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 1. Configuration
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Define branch variables
          TEMP_BRANCH="temp-history-update"
          TARGET_BRANCH="task-history"
          
          # 2. Commit the newly generated file to a TEMPORARY branch.
          git checkout -b $TEMP_BRANCH
          git add .github/data/history.json
          git commit -m "Temp commit for history update"
          
          # 3. Fetch/Create the target branch.
          if git fetch origin $TARGET_BRANCH; then
            echo "âœ… Target branch $TARGET_BRANCH exists."
            git checkout $TARGET_BRANCH
          else
            echo "ðŸš€ Creating new target branch $TARGET_BRANCH."
            # Create a new, empty (orphan) branch for history
            git checkout --orphan $TARGET_BRANCH
            git rm -rf . # Remove all files from the index
            mkdir -p .github/data
            # We don't need to commit here, the next step adds the content
          fi
          
          # 4. OVERWRITE the target branch's file with the version from the temporary branch.
          # This step pulls only the file's content, resolving any conflict automatically.
          git checkout $TEMP_BRANCH -- .github/data/history.json
          
          # 5. Commit the final change on the target branch
          git add .github/data/history.json
          git commit -m "Update task history [skip ci]" || echo "No changes to commit"
          
          # 6. Push the changes
            TOKEN=${GH_PAT:-${GITHUB_TOKEN}}
            git push https://x-access-token:${TOKEN}@github.com/${{ github.repository }} $TARGET_BRANCH -f
