name: Weekly Task Rotation

on:
  schedule:
    - cron: '0 9 * * 0' # every Sunday at 09:00 UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  assign-tasks:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git identity
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install pandas numpy email-validator

      - name: Fetch or create history branch
        run: |
          git fetch origin task-history || echo "No existing history branch"
          if git show-ref --verify --quiet refs/remotes/origin/task-history; then
            echo "âœ… History branch exists"
            git checkout task-history
          else
            echo "ðŸš€ Creating new history branch"
            git checkout --orphan task-history
            mkdir -p .github/data
            echo "{}" > .github/data/history.json
            git add .github/data/history.json
            git commit -m "Initialize task history"
            git push origin task-history
          fi
          git checkout main

      - name: Run task assignment
        env:
          TASKS_JSON: ${{ vars.TASKS_JSON }}
          PEOPLE_JSON: ${{ vars.PEOPLE_JSON }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          SMTP_SERVER: ${{ vars.SMTP_SERVER }}
          SMTP_PORT: ${{ vars.SMTP_PORT }}
        run: python .github/scripts/assign_tasks.py

      - name: Commit updated history
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
          # 1. Copy latest history from main into a temporary file
          cp .github/data/history.json /tmp/history.json
      
          # 2. Stash the current state (to allow a clean checkout)
          git add .github/data/history.json
          git stash push -m "Stashing current history before branch switch"
      
          # 3. Switch branches
          git fetch origin task-history
          git checkout task-history
      
          # --- FIX STARTS HERE ---
          # 4. Apply the stashed changes, favoring the stashed (local) version during conflict
          # This command attempts the merge, but since we are going to overwrite it anyway, 
          # we just need to make sure the stashed file is available in the working directory.
          git stash apply --index 
      
          # 5. Reset the conflicted file to keep the local (stashed/updated) version
          # This step RESOLVES the conflict by throwing away the 'task-history' version and 
          # keeping the content from the 'git stash apply'.
          git checkout --theirs .github/data/history.json
          # OR, even simpler (since the copy/stash logic should mean the file is correct):
          
          # After a failed 'git stash pop' or 'apply', the conflict markers are in the file.
          # We resolve the conflict by simply re-copying the correct version from /tmp
          # This is the safest way to ensure the file is exactly what was generated.
          cp /tmp/history.json .github/data/history.json
      
          # 6. Clean up the stash entry manually (since pop failed/wasn't used)
          git stash drop 0 || true
          # --- FIX ENDS HERE ---
      
          # 7. Final commit
          git add .github/data/history.json
          git commit -m "Update task history [skip ci]" || echo "No changes to commit"
          
          TOKEN=${GH_PAT:-${GITHUB_TOKEN}}
          git push https://x-access-token:${TOKEN}@github.com/${{ github.repository }} task-history
